// Version simplifi√©e pour √©viter les conflits avec Stimulus d√©j√† initialis√©
console.log('üîß Chargement des contr√¥leurs de settings...');

// Fonction pour attendre que Stimulus soit disponible
function waitForStimulus() {
    return new Promise((resolve, reject) => {
        let attempts = 0;
        const maxAttempts = 50;
        
        function check() {
            const app = window.application || window.StimulusApp || window.Stimulus;
            
            if (app && app.register) {
                console.log('‚úÖ Application Stimulus trouv√©e pour enregistrer les contr√¥leurs');
                resolve(app);
                return;
            }
            
            attempts++;
            if (attempts >= maxAttempts) {
                reject(new Error('Application Stimulus non disponible apr√®s 5 secondes'));
                return;
            }
            
            setTimeout(check, 100);
        }
        
        check();
    });
}

// Fonction pour charger dynamiquement un script
function loadScript(src) {
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = src;
        script.onload = resolve;
        script.onerror = () => reject(new Error(`Erreur chargement ${src}`));
        document.head.appendChild(script);
    });
}

// Fonction principale d'initialisation
async function initializeSettingsControllers() {
    try {
        console.log('üîß Initialisation des contr√¥leurs de settings...');
        
        // 1. Attendre que Stimulus soit disponible
        const app = await waitForStimulus();
        
        // 2. Charger BaseSettingsController s'il n'est pas d√©j√† charg√©
        if (!window.BaseSettingsController) {
            console.log('üì¶ Chargement de BaseSettingsController...');
            await loadScript('/js/controllers/base_settings_controller_final.js');
            
            // Attendre que BaseSettingsController soit disponible
            await new Promise((resolve, reject) => {
                let attempts = 0;
                const check = () => {
                    if (window.BaseSettingsController) {
                        console.log('‚úÖ BaseSettingsController disponible');
                        resolve();
                    } else if (++attempts > 50) {
                        reject(new Error('BaseSettingsController timeout'));
                    } else {
                        setTimeout(check, 100);
                    }
                };
                check();
            });
        } else {
            console.log('‚úÖ BaseSettingsController d√©j√† disponible');
        }
        
        // 3. Cr√©er et enregistrer le contr√¥leur des param√®tres g√©n√©raux
        console.log('üîß Cr√©ation du contr√¥leur des param√®tres g√©n√©raux...');
        class GeneralSettingsController extends window.BaseSettingsController {
            static targets = [
                ...window.BaseSettingsController.targets,
                "autoMarkSolved", "autoCorrectCoordinates", "enableAutoScoring"
            ]
            
            apiEndpoint = '/api/settings/general'
            
            connect() {
                console.log('üîó GeneralSettingsController connect√© !');
                super.connect();
            }
            
            gatherSettings() {
                const settings = {
                    auto_mark_solved: this.hasAutoMarkSolvedTarget ? this.autoMarkSolvedTarget.checked : true,
                    auto_correct_coordinates: this.hasAutoCorrectCoordinatesTarget ? this.autoCorrectCoordinatesTarget.checked : true,
                    enable_auto_scoring: this.hasEnableAutoScoringTarget ? this.enableAutoScoringTarget.checked : true
                };
                console.log('üì§ GeneralSettings gatherSettings:', settings);
                return settings;
            }
            
            updateUI(settings) {
                console.log('üîÑ GeneralSettings updateUI appel√©e avec:', settings);
                
                if (this.hasAutoMarkSolvedTarget) {
                    this.autoMarkSolvedTarget.checked = settings.auto_mark_solved !== false;
                    console.log(`‚úÖ auto_mark_solved mis √† jour: ${this.autoMarkSolvedTarget.checked}`);
                } else {
                    console.warn('‚ö†Ô∏è Target autoMarkSolved non trouv√©');
                }
                
                if (this.hasAutoCorrectCoordinatesTarget) {
                    this.autoCorrectCoordinatesTarget.checked = settings.auto_correct_coordinates !== false;
                    console.log(`‚úÖ auto_correct_coordinates mis √† jour: ${this.autoCorrectCoordinatesTarget.checked}`);
                } else {
                    console.warn('‚ö†Ô∏è Target autoCorrectCoordinates non trouv√©');
                }
                
                if (this.hasEnableAutoScoringTarget) {
                    this.enableAutoScoringTarget.checked = settings.enable_auto_scoring !== false;
                    console.log(`‚úÖ enable_auto_scoring mis √† jour: ${this.enableAutoScoringTarget.checked}`);
                } else {
                    console.warn('‚ö†Ô∏è Target enableAutoScoring non trouv√©');
                }
            }
            
            getDefaults() {
                return {
                    auto_mark_solved: true,
                    auto_correct_coordinates: true,
                    enable_auto_scoring: true
                };
            }
        }
        
        app.register('general-settings', GeneralSettingsController);
        console.log('‚úÖ GeneralSettingsController enregistr√© avec succ√®s');
        
        // 4. Cr√©er et enregistrer le contr√¥leur des param√®tres Formula Solver
        console.log('üîß Cr√©ation du contr√¥leur Formula Solver...');
        class FormulaSettingsController extends window.BaseSettingsController {
            static targets = [
                ...window.BaseSettingsController.targets,
                "formulaExtractionMethod", "questionExtractionMethod"
            ]
            
            apiEndpoint = '/api/settings/formula'
            
            connect() {
                console.log('üîó FormulaSettingsController connect√© !');
                super.connect();
            }
            
            gatherSettings() {
                return {
                    formula_extraction_method: this.hasFormulaExtractionMethodTarget ? 
                        this.formulaExtractionMethodTarget.value : 'regex',
                    question_extraction_method: this.hasQuestionExtractionMethodTarget ? 
                        this.questionExtractionMethodTarget.value : 'regex'
                };
            }
            
            updateUI(settings) {
                console.log('üîÑ FormulaSettings updateUI appel√©e avec:', settings);
                
                if (this.hasFormulaExtractionMethodTarget) {
                    this.formulaExtractionMethodTarget.value = settings.formula_extraction_method || 'regex';
                }
                if (this.hasQuestionExtractionMethodTarget) {
                    this.questionExtractionMethodTarget.value = settings.question_extraction_method || 'regex';
                }
            }
            
            getDefaults() {
                return {
                    formula_extraction_method: 'regex',
                    question_extraction_method: 'regex'
                };
            }
        }
        
        app.register('formula-settings', FormulaSettingsController);
        console.log('‚úÖ FormulaSettingsController enregistr√© avec succ√®s');
        
        // 5. D√©clencher l'√©v√©nement global
        window.dispatchEvent(new CustomEvent('SettingsSystemReady', {
            detail: { 
                controllers: ['general-settings', 'formula-settings'],
                message: 'Syst√®me de settings compl√®tement initialis√©'
            }
        }));
        console.log('üéâ Syst√®me de settings compl√®tement initialis√© !');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation des contr√¥leurs de settings:', error);
    }
}

// D√©marrer l'initialisation
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSettingsControllers);
} else {
    initializeSettingsControllers();
}

console.log('‚úÖ Script index.js charg√© (version simplifi√©e)');
